//
//  ViewController.swift
//  Concentration
//
//  Created by Nelson Amerei on 8/27/21.
//  Copyright ¬© 2021 School21 namerei. All rights reserved.
//

import UIKit

//MVC model controller view
//model - our app
//controller - how that presented to the user
//view - controllers's minions
class ViewController: UIViewController {
    //init our class concentration
    //count + 1 / 2 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    //lazy - –∑–Ω–∞—á–∏—Ç —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
    lazy var game = Concentration(numberOfPairsOfCards: (cardButtons.count + 1) / 2)
    
    var flipCount = 0 {
        didSet { //–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å - —Å–ª–µ–¥–∏—Ç –∑–∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —á—Ç–æ —Ç–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
        flipCountLabel.text = "Flips : \(flipCount)"
        }
    }
    
    //–Ω–∞–¥–ø–∏—Å—å –≤–Ω–∏–∑—É
    @IBOutlet weak var flipCountLabel: UILabel!
    
    //—Ç–∏–ø–æ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
    @IBOutlet var cardButtons: [UIButton]!
    
    //actions:_ - –∏–º—è –≤–Ω–µ—à–Ω–µ–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ sender - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è
    @IBAction func touchCard(_ sender: UIButton) {
//        print("Touch card:")
        flipCount += 1
        //—Ç—É—Ç –º—ã —á–µ–∫–∞–µ–º –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ª–∏ –Ω–∞–º –Ω–∏–ª
        //.firstIndex = Returns the first index where the specified value appears in the collection.
        if let cardNumber = cardButtons.firstIndex(of: sender) {
            game.chooseCard(at: cardNumber)
            updateViewFromModel() //–Ω—É–∂–Ω–æ –¥–ª—è –æ—å–Ω–æ–≤–ª–µ–Ω–∏—è UI - –º–æ—è —Ñ—É–Ω–∫—Ü–∏—è
        } else {
            print("chosen card was not in cardButtons")
        }
    }
    
    func updateViewFromModel() {
        //.indeces - all indices
        for index in cardButtons.indices {
            let button = cardButtons[index]
            let card = game.cards[index]
            if card.isFaceUp {
                button.setTitle(emoji(for: card), for: UIControl.State.normal)
                button.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
            } else {
                button.setTitle("", for: UIControl.State.normal)
                button.backgroundColor = card.isMatched ? #colorLiteral(red: 0.9999018312, green: 1, blue: 0.9998798966, alpha: 0) : #colorLiteral(red: 0, green: 0.4784313725, blue: 1, alpha: 1)

            }
        }
    }
    
    var emojiChoices = ["ü¶á", "üò±", "üôÄ", "üòà", "üéÉ", "üëª", "üç≠", "üç¨", "üçé"]
    
    var emoji = [Int:String]() //dictionary init

    func emoji(for card: Card) -> String {
        if emoji[card.identifier] == nil, emojiChoices.count > 0 {
            let randomIndex = Int(arc4random_uniform(UInt32(emojiChoices.count)))
            emoji[card.identifier] = emojiChoices.remove(at: randomIndex) //—É–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫  –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        }
        
        
        return emoji[card.identifier] ?? "?" //??-check nil
    }
}

